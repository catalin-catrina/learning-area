           - Exceptions are objects that inherit from System.Exception base class
           - We can generate our own exception by using the throw statement
           - Different exception classes represent different errors
           - Exception classes can contain additional error information in properties
           - Different types of exceptions can be handled with different error handling code
           - We can get the definition of an exception from different places such as:
                - the standard exceptions provided by the.NET framework
                - exceptions provided by framework / library authors
                - our own custom application exceptions

           -  We can think of exceptions like being defined by either the System, Third Parties, or by our own code
               -  System exceptions are thrown by the.NET Runtime (CLR), and are defined as part of the.NET Framework
                     For example: The OutOfMemory exception or the StackOverflow exception
               -  Third party exceptions are provided by libraries or frameworks
                     For example: JsonSerialization exception
               -  Our own custom exceptions
                     For example: suppose we created a RulesEngine exception to represent errors when executing the engine

             Essentially, the actual type of the exception class represents the kind of error that occurred
             Any additional property values that are set on the exception object help to further refine/define the error that occurred

             Exceptions are organized into a class hierarchy
             At the root is System.Exception baseclass
                 SystemException inherits from System.Exception baseclass and it has a number of derived children, some of which are:
                     OutOfMemoryException
                     StackOverflowException
                     ArgumentException - which is itself a baseclass for a number of other exceptions, including:
                         ArgumentNullException
                         ArgumentOutOfRangeException
                 ArithmeticException inherits from System.Exception baseclass, and it has a number of derived classes itself such as:
                     DivideByZeroException
                     OverflowException
                 ApplicationException - is a class that should not be part of the.NET Framework.The original idea was that classes derived from System.Exception would indicate exceptions thrown
                     from the CLR (or system) itself, whereas non-CLR exceptions would be derived from ApplicationException.However a lot of exception classes didn't follow this pattern
                 (custom exceptions) - when we create our own exceptions we also inherit from the Exception baseclass

             System.Exception is the baseclass for all types of exceptions
             The class itself has a number of properties like: Message, StackTrace, Data, InnerException, Source, HResult, HelpLink and TargetSite
                 Message - is of type string, describes the reason for the exception
                 StackTrace - is of type string, provides info about the call stack - helps to show the execution path/flow that led to the exception
                 Data - is of type IDictionary - string key / object value - additional user-defined exception data
                 InnerException - is of type System.Exception and captures the preceding exception in a new exception, known as exception "wrapping"
                 Source - is of type string and represents the application/object name that caused the error, defaults to the name of the originating assembly
                 HResult - is of type Int32 and represents a HResult numerical value, often used with COM-interop code
                 HelpLink - string, allows to specify a link to associated help file for this error, may be a URN or URL
                 TargetSite - of type System.Reflection.MethodBase, gives access to info about the method that threw current exception (its name, return type, is public/private etc)
             There's a number of constructors available on the System.Exception class, and you'll often see variations of these in derived classes also
                 public Exception()
                     - default constructor takes no parameters
                     - default Message property assigned and a null InnerException property.The default message property that we get is different for each of the derived exceptions
                 public Exception(string message)
                     - the next constructor overload allows us to specify a string message and this maps to the Message property of the Exception class
                 public Exception(string message, Exception innerException)
                     - the 3rd constructor overload allows us to specify a user defined message and also an innerException
                     - it's this constructor that we use if we're wrapping an existing exception

             Commonly Encountered Exceptions
             Exception - represents execution errors
                 SystemException - base class for exceptions in system exceptions namespace
                 We should not throw any of these two, and we should not catch these exceptions except in top-level exception handling blocks
             InvalidOperationException - thrown when the current state of the object is invalid for a specific method being called
                 throw when your object is in an inappropiate state when a method is called
             ArgumentException - thrown when a method argument is invalid; baseclass for ArgumentNullException and ArgumentOutOfRangeException
                 ArgumentNullException - thrown when a null is passed to a method argument and it cannot accept nulls
                 ArgumentOutOfRangeException - thrown when a method argument is outside of an allowable range
                     Set the ParamName when throwing one of the subclasses of ArgumentException
             NullReferenceException - thrown when an attempt is made to dereference a null object reference(like calling substring on a null string object)
             IndexOutOfRangeException - thrown when attempting to access an array/collection item that is outside its bounds
                 NullReferenceException and IndexOutOfRangeException are reserved for runtime use, usually indicate a bug and should not be thrown by you
             StackOverflowException - thrown when too many nested method calls cause the execution stack to overflow(recursive method without a base case)
                 don't throw, don't catch, reserved and thrown by runtime
             OutOfMemoryException - thrown when there is not enough memory to continue executing the program
                 don't throw, reserved and thrown by runtime
                 if you want to catch / handle it, you should include a catch block that calls the Environment.FailFast method to terminate your app and add an entry to the system event log