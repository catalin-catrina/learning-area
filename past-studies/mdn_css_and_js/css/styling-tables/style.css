/* 

The table-layout CSS property sets the algorithm used to lay out <table> cells, rows, and columns. 

auto
By default, most browsers use an automatic table layout algorithm. The widths of the table and its cells 
are adjusted to fit the content.

fixed
Table and column widths are set by the widths of table and col elements or by the width of the first row 
of cells. Cells in subsequent rows do not affect column widths.

Under the "fixed" layout method, the entire table can be rendered once the first table row has been 
downloaded and analyzed. This can speed up rendering time over the "automatic" layout method, but 
subsequent cell content might not fit in the column widths provided. Cells use the overflow property to 
determine whether to clip any overflowing content, but only if the table has a known width; otherwise, 
they won't overflow the cells.

A table-layout value of fixed is generally a good idea to set on your table, as it makes the table behave
a bit more predictably by default. Normally, table columns tend to be sized according to how much content 
they contain, which produces some strange results. With table-layout: fixed, you can size your columns 
according to the width of their headings, and then deal with their content as appropriate. 

This is why we've selected the four different headings with the thead th:nth-child(n) (:nth-child) 
selector ("Select the nth child that is a <th> element in a sequence, inside a <thead> element") and 
given them set percentage widths. The entire column width follows the width of its heading, making 
for a nice way to size your table columns. 

We've coupled this with a width of 100%, meaning that the table will fill any container it is put in, 
and be nicely responsive (although it would still need some more work to get it looking good on narrow 
screen widths).

A border-collapse value of collapse is standard best practice for any table styling effort. 
By default, when you set borders on table elements, they will all have spacing between them.
With border-collapse: collapse; set, the borders collapse down into one, which looks much better

We've put a border around the whole table, which is needed because we'll be putting some borders round 
the table header and footer later on — it looks really odd and disjointed when you don't have a border 
round the whole outside of the table and end up with gaps.

We've set some padding on the <th> and <td> elements — this gives the data items some space to breathe, 
making the table look a lot more legible.

*/

table {
  table-layout: fixed;
  width: 100%;
  border: 3px solid purple;
  border-collapse: collapse;
}

thead th:nth-child(1) {
  width: 30%;
}

thead th:nth-child(2) {
  width: 20%;
}

thead th:nth-child(3) {
  width: 15%;
}

thead th:nth-child(4) {
  width: 35%;
}

th,
td {
  padding: 20px;
}

/* 

There is nothing really specific to tables here; we are generally tweaking the font styling to make things
easier to read:

We have set a global sans-serif font stack; this is purely a stylistic choice. We've also set our 
custom font on the headings inside the <thead> and <tfoot> elements, for a nice grungy, punky look.

We've set some letter-spacing on the headings and cells, as we feel it aids readability. Again, mostly 
a stylistic choice.

We've center-aligned the text in the table cells inside the <tbody> so that they line up with the headings. By default, cells are given a text-align value of left, and headings are given a value of center, but generally it looks better to have the alignments set the same for both. The default bold weight on the heading fonts is enough to differentiate their look.
We've right-aligned the heading inside the <tfoot> so that it is visually associated better with its 
data point.

*/

html {
  font-family: 'helvetica neue', helvetica, arial, sans-serif;
}

thead th,
tfoot th {
  font-family: 'Rock Salt', cursive;
}

th {
  letter-spacing: 2px;
}

td {
  letter-spacing: 1px;
}

tbody td {
  text-align: center;
}

tfoot th {
  text-align: right;
}

/* 

Again, there's nothing specific to tables here, but it is worthwhile to note a few things.

We've added a background-image to the <thead> and <tfoot>, and changed the color of all the text insidethe header and footer to white (and given it a text-shadow) so it is readable. You should always make sure your text contrasts well with your background, so it is readable.

We've also added a linear gradient to the <th> and <td> elements inside the header and footer for a nice 
bit of texture, as well as giving those elements a bright purple border. It is useful to have multiple 
nested elements available so you can layer styles on top of one another. Yes, we could have put both the 
background image and the linear gradient on the <thead> and <tfoot> elements using multiple background 
images, but we decided to do it separately for the benefit of older browsers that don't support multiple 
background images or linear gradients.

*/

thead,
tfoot {
  background: url(leopardskin.jpg);
  color: #fff;
  text-shadow: 1px 1px 1px black;
}

thead th,
tfoot th,
tfoot td {
  background: linear-gradient(
    to bottom,
    rgba(0, 0, 0, 0.5),
    rgba(0, 0, 0, 0.5)
  );
  border: 3px solid purple;
}

/* 

Earlier on you saw the :nth-child selector being used to select specific child elements. It can also be 
given a formula as a parameter, so it will select a sequence of elements. The formula 2n-1 would select 
all the odd numbered children (1, 3, 5, etc.) and the formula 2n would select all the even numbered 
children (2, 4, 6, etc.) We've used the odd and even keywords in our code, which do exactly the same
things as the aforementioned formulae. In this case we are giving the odd and even rows different (lurid)
colors.

We've also added a repeating background tile to all the body rows, which is just a bit of noise 
(a semi-transparent .png with a bit of visual distortion on it) to provide some texture.

Lastly, we've given the entire table a solid background color so that browsers that don't support
the :nth-child selector still have a background for their body rows.

*/

tbody tr:nth-child(odd) {
  background-color: #ff33cc;
}

tbody tr:nth-child(even) {
  background-color: #e495e4;
}

tbody tr {
  background-image: url(noise.png);
}

table {
  background-color: #ff33cc;
}

/* 

There is nothing remarkable here, except for the caption-side property, which has been given a value of 
bottom. This causes the caption to be positioned on the bottom of the table

*/

caption {
  caption-side: bottom;
  font-family: 'Rock Salt', cursive;
  padding: 20px;
  font-style: italic;
  color: #666;
  text-align: right;
  letter-spacing: 1px;
}

/* 

Table styling quick tips

Before moving on, we thought we'd provide you with a quick list of the most useful points illustrated 
above:

Make your table markup as simple as possible, and keep things flexible, e.g. by using percentages, 
so the design is more responsive.

Use table-layout: fixed to create a more predictable table layout that allows you to easily set column 
widths by setting width on their headings (<th>).

Use border-collapse: collapse to make table elements borders collapse into each other, producing a neater
and easier to control look.

Use <thead>, <tbody>, and <tfoot> to break up your table into logical chunks and provide extra places 
to apply CSS to, so it is easier to layer styles on top of one another if required.

Use zebra striping to make alternative rows easier to read.

Use text-align to line up your <th> and <td> text, to make things neater and easier to follow.

*/
